#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use esmith::NetworksDB;
use esmith::HostsDB;
use JSON;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';
require '/usr/libexec/nethserver/api/nethserver-firewall-base/lib/firewall_functions.pl';

sub list_services
{
    my $fdb = esmith::ConfigDB->open_ro('fwservices');
    my @services;
    foreach ($fdb->get_all()) {
        my %props = $_->props;
        $props{'name'} = $_->key;
        my @ports = split(",",$props{'Ports'});
        $props{'Ports'} = \@ports;
        push(@services, \%props);
    }

    return \@services;
}

sub find_service
{
    my $src = shift;
    my $proto = shift;
    my $services = shift;

    foreach (@$services) {
        my $p = $_->{'Ports'};
        my $ports = join(",",@$p);
        if ($proto eq $_->{'Protocol'} && $src eq $ports) {
            return $_->{'name'};
        }
    }

    return '';
}

my $input = readInput();
my $cmd = $input->{'action'};

if ($cmd eq 'snat') {

    my $ndb = esmith::NetworksDB->open_ro();
    my @aliases;
    my $ret = {"aliases" => \@aliases};
    foreach ($ndb->get_all_by_prop('type' => 'alias')) {
        my @tmp = split(":",$_->key);
        my $parent = $ndb->get($tmp[0]);
        my $role = $parent->prop('role') || next;
        next if ($role ne 'red');
        my $obj = $_->prop('FwObjectNat') || undef;
        push(@aliases, {"name" => $_->key, "ipaddr" => $_->prop('ipaddr'), 'FwObjectNat' => $obj});
    }

    print encode_json($ret);

} elsif ($cmd eq 'portforward') {

    my $db = esmith::ConfigDB->open_ro('portforward');
    my $hdb = esmith::HostsDB->open_ro();
    my %pf;
    my $services = list_services();
    my $ret = {"portforward" => \%pf};
    foreach ($db->get_all()) {
        my %props = $_->props;
        $props{'name'} = $_->key;
        if (!exists($props{'Log'})) {
            $props{'Log'} = "none";
        }

        $props{'Service'} = find_service($props{'Src'}, $props{'Proto'}, $services);
        if (!exists($pf{$props{'DstHost'}})) {
            $pf{$props{'DstHost'}}{'rules'} = [];
            $pf{$props{'DstHost'}}{'info'} = {};
        }
        my $tmp = $pf{$props{'DstHost'}}{'rules'};
        push(@$tmp, \%props);

        if ($props{'DstHost'} =~ m/host;/) {
            $pf{$props{'DstHost'}}{'info'}{'type'} = 'object';
            my $host = (split(";",$props{'DstHost'}))[1];
            # read description and ip address
            $pf{$props{'DstHost'}}{'info'}{'IpAddress'} = $hdb->get_prop($host, 'IpAddress') || '';
            $pf{$props{'DstHost'}}{'info'}{'Description'} = $hdb->get_prop($host, 'Description') || '';
        } else {
            $pf{$props{'DstHost'}}{'info'}{'type'} = 'ip';
        }
    }
    print encode_json($ret);

} elsif ($cmd eq 'services') {

    my $ret = {'services' => list_services()};
    print encode_json($ret);

} elsif ($cmd eq 'wans') {

    my $ndb = esmith::NetworksDB->open_ro();
    my @wans;
    my $ret = {"wans" => \@wans};
    foreach ($ndb->get_all()) {
        my $type = $_->prop('type');
        my $role = $_->prop('role') || next;

        if ($type eq 'alias') {
            my @tmp = split(":",$_->key);
            my $parent_role = $ndb->get_prop($tmp[0], 'role') || '';
            next if ($parent_role ne 'red');
            push(@wans, $_->prop('ipaddr'));
        } else {
            next if ($role ne 'red');
            my $bootproto = $_->prop('bootproto') || next;

            if ($bootproto eq 'dhcp') {
                my $iname = $_->key;
                my $cidr = `/sbin/ip -o -4 address show $iname primary 2>/dev/null| head -1 | awk '{print \$4}'`;
                $cidr =~ /^(.*)\/(.*)$/;
                push(@wans, $1);
            } else {
                push(@wans, $_->prop('ipaddr'));
            }
        }
    }

    print encode_json($ret);


} elsif ($cmd eq 'protocols') {

    my @protocols;

    open (my $fh, "<:encoding(utf8)", "/etc/protocols") || error();
    if ($fh) {
        while (<$fh>) {
            next if ($_ =~ /^#/);
            chomp($_);
            my @tmp = split(/\t/,$_);
            if ($tmp[0]) {
                push(@protocols, $tmp[0]);
            }
        }
        close $fh;
    }
    my $ret = {'protocols' => \@protocols};

    print encode_json($ret);
} else {
    error()
}
